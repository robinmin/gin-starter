// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: 02_query.sql

package dbo

import (
	"context"
)

const getRoleNamesByUsername = `-- name: GetRoleNamesByUsername :many
SELECT auth_roles.name FROM auth_user_roles
LEFT JOIN auth_users ON auth_users.id = auth_user_roles.user_id
LEFT JOIN auth_roles ON auth_roles.id = auth_user_roles.role_id
WHERE auth_users.username = ?1
`

func (q *Queries) GetRoleNamesByUsername(ctx context.Context, username string) ([]*string, error) {
	rows, err := q.db.QueryContext(ctx, getRoleNamesByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*string
	for rows.Next() {
		var name *string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidUserInfo = `-- name: GetValidUserInfo :one
SELECT id, username, password, email, created_at, updated_at FROM auth_users WHERE username = ?1 AND password = ?2 limit 1
`

func (q *Queries) GetValidUserInfo(ctx context.Context, username string, password string) (AuthUser, error) {
	row := q.db.QueryRowContext(ctx, getValidUserInfo, username, password)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyUserCredentials = `-- name: VerifyUserCredentials :one
SELECT count(1) as n_count FROM auth_users WHERE username = ?1 AND password = ?2 limit 1
`

func (q *Queries) VerifyUserCredentials(ctx context.Context, username string, password string) (int64, error) {
	row := q.db.QueryRowContext(ctx, verifyUserCredentials, username, password)
	var n_count int64
	err := row.Scan(&n_count)
	return n_count, err
}
